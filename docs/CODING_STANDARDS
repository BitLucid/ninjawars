FOLLOW THESE NINJAWARS CODING STANDARDS OR BE RIDICULED:

* If statements must look like this:

      if(true){
          ...
      } else {
          ...
      }
  
  NOT like this:
  
      // BAD
      if (true)
      {
          ...
      }
      else
      {
          ....
      }
  
  or this:
  
      // ALSO BAD
      if ( true ){
          ...
      }
      
    Essentially, a starting base of One True Brace style:  
    http://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS

  Use line returns sparingly inside functions, making your code less compact tends to make it 
  less readable instead of more readable.

* Variables, and functions use underscores in snake_case:

      $foo_bar = "baz"; // Good
      $fooBar = "baz";  // BAD

* Class names in Upper CamelCase:

      $foo = new FooBarBaz(); // Good
      $foo = new Foo_Bar_Baz();   // BAD
      $foo = new foo_bar_baz(); // BAD

* Class methods should be lower camelCase:

      $out = $inst->someMethodName();


* Function calls:

      $position = calculate_stuff($radius, $diameter);   // Good
      $position = calculate_stuff ( $radius,$diameter ); // BAD

* Constant defines in SCREAMING_SNAKE_CASE

    const SOME_CLASS_CONSTANT = null; // Good
    self::SOME_CLASS_CONSTANT * 5; // Good
    define('MY_BEST_FRIEND', 'alcohol'); // Good

*   A simple summary comment per function and method is a MINIMUM STARTING POINT.

  Comment anything that does not adhere to conventions. Things that are done
  idiomatically or by convention probably do not need comments.
  
  Add comments to document WHY something is done, not WHAT is done -- provide
  context. If in doubt as to what to write, be a reporter and try to answer 
  Who/What/Why/Where in general terms.

* Put closing parenthesis on the same line as the last line of code. E.g.,
  
      $person = Person::get(array(
          "username" => $this->in['username'],
          "password" => $this->in['password'],
          "account_status" => 1));
  EDIT: NO, NEVER MIND THIS, DO WHATEVER YOU HAVE TO MAKE NESTED STRUCTURES READABLE.

* Do not abuse the ternary operator. Keep it simple and readable. Use temporary variables.
  Here is an example of simple proper usage, with only a single ternary on a line:
  
      $old_values = ($old_record ? $old_record->values() : null);

  AND NOT
  
      $recorded = ($old_record ? $old_record->values() : ($no_record? 'Default' : ($new_record? $new_record : 'somethingElSe')));


* Database

    Name the database tables with plural, lowercase terms (e.g. classes, messages, players, octopi instead of Class, Message, Player, Octopus), by convention.  It's great to have created_at and updated_at fields on tables as well.

* Legacy Code:

    Apply Campfire coding practices: Don't rewrite older code to match the coding standards unless you're actually 
    refactoring functionality as well, because refactoring without improvement can cause as much bugginess
    as refactoring with improvement, just with less benefit, plus whitespace changes cause noise in commits
    that make it hard to review.
