Git Workflow with Centralized Subversion Repository

SETUP
Clone the current working branch from the server repository, have to clone others individually:
    git clone tchalvak@ninjawars.net:~/public_html/ninjawars

Import svn repo for read-write use:

    git svn clone svn+ssh://www.ninjawars.net/home/projects/ninjawars/ ninjawars --username someUserName

For non-trivial changes, start a branch:

    git checkout -b foobar


MAKE CHANGES
Hack away. To see what you've changed:

    git status
    git diff

To stop tracking a certain file:

	

COMMIT TO LOCAL INDEX
Commit early and often (these commits happen only locally):

    git commit -a -m 'message'

Need to make a minor tweak? Amend the previous commit:

    git commit --amend -a -m 'new message'


RESET FILES
To reset local modification for one file:

	git checkout HEAD -- ./someFilePath
		to return it to the state from the latest commit.
	git checkout -- ./someFilePath
		to return it to the state of the index.

Resetting current local code modifications (keeping the local changes, just unapplied):

	git reset --soft HEAD

Pulling off all local code changes and turning them back to match previous code state:
	
	git stash


UPDATE FROM REMOTE SVN REPOSITORY
Along the way, you may need to pull in updates from the svn repo:

    git svn rebase
     
Or, to preserve local modifications when you pull in updates:

    git stash
    git svn rebase
    git stash apply


SWITCH BRANCHES
When you're done with the changes, switch back to the master branch...

    git checkout master


MERGING
...and merge. If you want to squash the merge into one commit:

    git merge --squash someBranchName
    git commit -m 'new message'

Or, if you want to preserve all the small commits:

    git merge someBranchName

To resolve any conflicts that you find after pulling a merge:

	git mergetool
		to get a list of gui possibilities (meld works great if installed), or to specify a tool:
	git mergetool --tool=meld
		or to merge from the command line:
	git update-index someResolvedFile


SEND OUT CHANGES TO SERVER GIT REPO (could use local ssh public key on the server, if set up)
Add a remote git testing repo from the server as a place to push and pull changes from:

	git remote add someAliasForRemoteServer ssh://someSSHUserName@serverName.com/path-to-git-repo-folder/

Pull remote changes from the testing server branch to the current branch:

	git pull someAliasForRemoteServer HEAD
	(if ssh private key access is set, will securely not need password.  Recommended.)

Push a new local branch off to be added as an independent branch in the the master repository:

	git push someAliasForRemoteServer branchNameToPass

Push local changes from a branch to the testing server master branch:

	git push someAliasForRemoteServer master
	


SEND OUT CHANGES TO SVN MASTER
Finally, send out the commit(s) to the svn server:

    git svn dcommit
    
    
    
    
    
    
    
    
Example bash script to put the current git branch in the prompt:

GITBRANCH=`which git-name-rev 2>/dev/null`
function prompt_command {
  if [ -n ${GITBRANCH} ]; then
    BRANCH=`$GITBRANCH HEAD 2>/dev/null | awk "{ print \\$2 }"`
    if [ $BRANCH ]; then
      BRANCH=" [git: $BRANCH] ";
    fi
  else
    BRANCH='';
  fi
}
PROMPT_COMMAND='prompt_command'
PS1="\u@\h:\W\$BRANCH\$ "
export -f prompt_command
export PS1 PROMPT_COMMAND GITBRANCH
