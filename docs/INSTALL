Dependencies
-------------
Linux, Debian-based, highly recommended, you're on your own on windows.

PHP5, Postgresql8, Perl>=5, Apache2, Perl::Lingua::En::Inflect, postgresql-contrib & libpq-dev (for password hashing)

Via apt-get command line:

(Required)
sudo apt-get install apache2 php5 php5-pgsql postgresql postgresql-contrib libpq-dev smarty

(Recommended, but not completely required for local development)
sudo apt-get install perl liblingua-en-inflect-perl

(Totally optional)
sudo apt-get install awstats git-core


All Types of Deployment
---------------
1. Set up your database if necessary:
Become postgres user & enter database:
sudo su postgres
createuser -s kzqaiOrWhateverUsernameIsAppropriate
createdatabase ninjawars

-Set permissions in your pg_hba for the database, host, and user to match your configuration

2. Copy a live database (probably the easiest) or create a skeleton database and then run the migrations in  /deploy/db/migrations/ on it.
echo "create role developers;
GRANT ALL ON nw.* TO GROUP developers;
GRANT ALL ON DATABASE nw to group developers;
create role kzqai SUPERUSER LOGIN in group developers;" | psql nw
psql nw < nw-backup-2012-11-04-Time-11-01.sql 

Create the postgresql password hashing functions
---------------
Using postgresql 9.1, run create extension pgcrypto from postgresql-contrib, using:
echo "create extension pgcrypto" | psql -d nw
For older versions:
Determine the postgresql user shared folder.
> pg_config --sharedir
/usr/share/postgresql/8.4 (example)
Run the module setup sql in the SHARE_DIRECTORY/contrib/pgcrypto.sql, e.g.
> psql -d nw -f /usr/share/postgresql/8.4/contrib/pgcrypto.sql

For the pgcrypto functions, see: http://www.postgresql.org/docs/8.3/static/pgcrypto.html
For contrib install instructions, see: http://www.postgresql.org/docs/8.3/static/contrib.html


Optional install of Test suite
-----------
See docs/test_suite_install for procecure for installing the test suite.

Using /scripts/deploy
---------------------
1. Create a uniquely named configuration file for your deployment from the template in /master.conf
2. Run `scripts/deploy -c=yourfile.conf deploy`
3. If you have not already done so, create an apache virtualhost for your deployment with the first 2 lines outputted regarding apache
4. If your apache config is not writable, create a file in your deployment at www/.htaccess with the contents echoed to the terminal
5. If your cron.d config is not writable, add the cron lines echoed to the terminal to your crontab with `crontab -e`

Using your working copy
-----------------------
3. cp deploy/resources.build.php deploy/resources.php
4. mkdir -p deploy/resources/logs
5. configure your virtualhost (nw.local or nw.localhost recommended!)
6. mkdir deploy/templates/compiled
7. chmod uga+rX,ug+wx deploy/templates/compiled