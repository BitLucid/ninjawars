#!/bin/bash

#todo - Add vhost generation
#todo - Add interactive questions to make the script "wizard"-like
#todo - Add batch option to use defaults and avoid interactivity
#todo - integrate database scripts to run by an option

usage()
{
   cat <<EOF
Usage: deploy -c=/foo/bar/foobar.conf [OPTIONS] /foo/bar/deploy.tar
Arguments:
	/foo/bar/ninjawars/deploy.tar
		The source tarball or directory to deploy from (supports .tar, .tar.gz, .tgz, .tar.bz, .tbz, and directory).
Options:
	-c=/foo/bar/nw/test.conf
		The configuration file which contains name/value pairs of all deployment constants.
EOF
       exit $1
}

if test $# -lt 2; then
       usage 1 1>&2
fi

#DEFAULT VALUES
DB_HOST=''
DB_USER=''
DB_NAME=''
DEBUG=''
OFFLINE=''
DEBUG_ALL=''
SERVER_ROOT=''
WWW_ROOT=''
ADMIN_EMAIL=''
SUPPORT_EMAIL=''
SUPPORT_EMAIL_NAME=''
SYSTEM_EMAIL=''
SYSTEM_EMAIL_NAME=''
TEMPLATE_CACHING=false
VHOST_LISTEN='*'

source_files=''
configuration_file=''
resource_file=''
host_alias=''
CRON_USER=''

CLEAN_DEPLOY=false;

while test $# -gt 0; do
	case "$1" in
		-*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'`
		;;
		*) source_files=$1
		;;
	esac

	case $1 in
		-c=*)
		configuration_file=$optarg
		;;
	esac

	case $1 in
		--clean)
		CLEAN_DEPLOY=true
		;;
	esac
	shift
done

if [ ! -d $source_files ]
then
	tmp_dir=`mktemp -d /tmp/nw.XXXXXXXXXX`

	if ! touch "$tmp_dir"
	then
		echo "ERROR: Can't make temporary directory for source extraction";
		exit;
	fi

	case "$source_files" in
		*.tar.gz)
		tar -C "$tmp_dir" -xzf "$source_files"
		;;
		*.tgz)
		tar -C "$tmp_dir" -xzf "$source_files"
		;;
		*.tar.bz)
		tar -C "$tmp_dir" -xjf "$source_files"
		;;
		*.bz)
		tar -C "$tmp_dir" -xjf "$source_files"
		;;
		*.tar)
		tar -C "$tmp_dir" -xf "$source_files"
		;;
	esac

	source_files="$tmp_dir/"
else
	lastchr=${source_files#${source_files%?}}

	if [ ! $lastchr == '/' ]
	then
		source_files="$source_files/"
	fi

	if [ ! ${source_files:0:1} == '/' ]
	then
		source_files="`pwd`/$source_files"
	fi
fi

if ! touch "$source_files"
then
	echo "ERROR: Source directory unreadble.";
	exit;
fi

# READ IN CONFIGURATION FILE
while read curline; do
	optarg=${curline##*=}
	case ${curline%%=*} in
		DB_HOST)
		DB_HOST=$optarg
		;;
		DB_NAME)
		DB_NAME=$optarg
		;;
		DB_USER)
		DB_USER=$optarg
		;;
		DB_PASSWORD)
		DB_PASSWORD=$optarg
		;;
		WWW_ROOT)
		WWW_ROOT=$optarg
		;;
		SERVER_ROOT)
		SERVER_ROOT=$optarg
		;;
		TEMPLATE_CACHING)
		TEMPLATE_CACHING=$optarg
		;;
		OFFLINE)
		OFFLINE=$optarg
		;;
		DEBUG)
		DEBUG=$optarg
		;;
		DEBUG_ALL)
		DEBUG_ALL=$optarg
		;;
		ADMIN_EMAIL)
		ADMIN_EMAIL=$optarg
		;;
		SUPPORT_EMAIL)
		SUPPORT_EMAIL=$optarg
		;;
		SUPPORT_EMAIL_NAME)
		SUPPORT_EMAIL_NAME=$optarg
		;;
		SYSTEM_EMAIL)
		SYSTEM_EMAIL=$optarg
		;;
		SYSTEM_EMAIL_NAME)
		SYSTEM_EMAIL_NAME=$optarg
		;;
		HOST_ALIAS)
		host_alias=$optarg
		;;
		CRON_USER)
		CRON_USER=$optarg
		;;
		VHOST_LISTEN)
		VHOST_LISTEN=$optarg
		;;
	esac
done < $configuration_file

if [ ! -f $configuration_file ] && [[ ! $resource_file || ! -f $resource_file ]]
then
       echo "No configuration found! Please provide a completed resource file or a configuration file. Aborting."
       exit
fi

if [ ${SERVER_ROOT: -1} != '/' ]
then
    SERVER_ROOT=${SERVER_ROOT}/
fi

if [ ${WWW_ROOT: -1} != '/' ]
then
    WWW_ROOT=${WWW_ROOT}/
fi

if [ ! -d $SERVER_ROOT ]
then
	echo -n "The target directory $SERVER_ROOT does not exist. Shall I create it? [Y/n]: "
	read answer
	if [[ $answer == "y" || $answer == "Y" || $answer == "" ]]
	then
		mkdir -p $SERVER_ROOT
	else
		echo "User aborted deployment script. No changes have been made."
		exit
	fi
fi

if ! touch "$SERVER_ROOT"
then
	echo "ERROR: Target deployment directory unreadble.";
	exit;
fi

## CD TO DESTINATION
cd $SERVER_ROOT || exit

if [ $CLEAN_DEPLOY == true ]
then
	# WIPE EXISTING SITE - PROTECT resources/ FOR NOW
	rm -rf `find -P ./ -maxdepth 1|grep -v "./$"|grep -v resources`
fi

if [ ! -d "${SERVER_ROOT}resources/" ]
then
	mkdir "${SERVER_ROOT}resources/"
fi

if [ ! -d "${SERVER_ROOT}resources/logs/" ]
then
	mkdir "${SERVER_ROOT}resources/logs/"
	chmod 777 "${SERVER_ROOT}resources/logs/"
fi

cp -r $source_files* $SERVER_ROOT
cp $source_files.* $SERVER_ROOT
echo "source files copied to $SERVER_ROOT"

mkdir templates/compiled/
chmod 777 templates/compiled/

#########################
### RESOURCES SECTION ###

if [[ $resources_file && -f $resources_file ]]
then
	cp $resources_file $SERVER_ROOT
else
	resources_file=`find ./ -name resources.template.php`
fi

# CONFIGURATION FILE STRING REPLACEMENTS
sed -i -e {s/__SERVER_ROOT__/"'"${SERVER_ROOT//\//\\/}"'"/}                $resources_file
sed -i -e {s/__WWW_ROOT__/"'"${WWW_ROOT//\//\\/}"'"/}                      $resources_file
sed -i -e {s/__DB_NAME__/"'"${DB_NAME//\//\\/}"'"/}                        $resources_file
sed -i -e {s/__DB_HOST__/"'"${DB_HOST//\//\\/}"'"/}                        $resources_file
sed -i -e {s/__SERVER_ROOT__/"'"${SERVER_ROOT//\//\\/}"'"/}                $resources_file
sed -i -e {s/__DB_USER__/"'"${DB_USER//\//\\/}"'"/}                        $resources_file
sed -i -e {s/__DB_PASSWORD__/"'"${DB_PASSWORD//\//\\/}"'"/}                $resources_file
sed -i -e {s/__ADMIN_EMAIL__/"'"${ADMIN_EMAIL//\//\\/}"'"/}                $resources_file
sed -i -e {s/__SUPPORT_EMAIL__/"'"${SUPPORT_EMAIL//\//\\/}"'"/}            $resources_file
sed -i -e {s/__SUPPORT_EMAIL_NAME__/"'"${SUPPORT_EMAIL_NAME//\//\\/}"'"/}  $resources_file
sed -i -e {s/__SYSTEM_EMAIL__/"'"${SYSTEM_EMAIL//\//\\/}"'"/}              $resources_file
sed -i -e {s/__SYSTEM_EMAIL_NAME__/"'"${SYSTEM_EMAIL_NAME//\//\\/}"'"/}    $resources_file

if [[ $OFFLINE == "true" ]]
then
    sed -i -e {s/__OFFLINE__/"true"/}  $resources_file
else
    sed -i -e {s/__OFFLINE__/"false"/} $resources_file
fi

if [[ $DEBUG == "true" ]]
then
    sed -i -e {s/__DEBUG__/"true"/}  $resources_file
else
    sed -i -e {s/__DEBUG__/"false"/} $resources_file
fi

if [[ $DEBUG_ALL == "true" ]]
then
    sed -i -e {s/__DEBUG_ALL__/"true"/}  $resources_file
else
    sed -i -e {s/__DEBUG_ALL__/"false"/} $resources_file
fi

## If we decide to squelch emails on a per config basis, this will be useful, don't delete for a bit please ##
#if [[ $SEND_EMAILS eq "true" ]]
#then
#    sed -i -e {s/__SEND_EMAILS__/"true"/}  $resources_file
#else
#    sed -i -e {s/__SEND_EMAILS__/"false"/} $resources_file
#fi

## If we move to templating, this will be used, don't delete please ##

#if [ -d $SERVER_ROOT/templates]
#then
#	rm -rf $SERVER_ROOT/templates/*
#else
#	mkdir $SERVER_ROOT/templates/
#fi

#if [ ! -d $SERVER_ROOT/templates_c]
#then
#	mkdir $SERVER_ROOT/templates_c/
#fi

#if [[ $TEMPLATE_CACHING ]]
#then
#    sed -i -e {s/__TEMPLATE_CACHING__/"true"/}  $resources_file
#else
#    sed -i -e {s/__TEMPLATE_CACHING__/"false"/} $resources_file
#fi

if [ -d $tmp_dir ]
then
	rm -rf $tmp_dir
fi

mv -f $resources_file "${SERVER_ROOT}resources.php"

### /RESOURCES SECTION ###
##########################

chmod -R g+w ./*

###################
## CRON SECTION ###

sed -i -e {s/__SERVER_ROOT__/${SERVER_ROOT//\//\\/}/}                "${SERVER_ROOT}cron/nw-heartbeat"

if [ ! $CRON_USER ]
then
	whoami=`whoami`
	echo "Which user will run the cron scripts? [$whoami]: "
	read CRON_USER

	if [ ! $CRON_USER ]
	then
		CRON_USER=$whoami
	fi
fi

sed -i -e {s/__CRON_USER__/${CRON_USER//\//\\/}/}                "${SERVER_ROOT}cron/nw-heartbeat"

cron_file="/etc/cron.d/nw-${DB_NAME//\//_/}-heartbeat"

if [ -w $cron_file ]
then
	if cat "${SERVER_ROOT}cron/nw-heartbeat" > $cron_file
	then
		rm "${SERVER_ROOT}cron/nw-heartbeat"
		echo "Crontab set."
	else
		echo "Warning: Access to $cron_file denied! You must make sure the following is included in a crontab:"
		cat "${SERVER_ROOT}cron/nw-heartbeat"
	fi
elif touch $cron_file
then
	if cat "${SERVER_ROOT}cron/nw-heartbeat" > $cron_file
	then
		rm "${SERVER_ROOT}cron/nw-heartbeat"
		echo "Crontab set."
	else
		echo "Warning: Access to $cron_file denied! You must make sure the following is included in a crontab:"
		cat "${SERVER_ROOT}cron/nw-heartbeat"
	fi
else
	echo "Warning: Access to $cron_file denied! You must make sure the following is included in a crontab:"
	cat "${SERVER_ROOT}cron/nw-heartbeat"
fi

### /CRON SECTION ###
#####################

######################
### APACHE SECTION ###

SERVER_NAME=${WWW_ROOT#h*//}
SHORT_SERVER_NAME=${SERVER_NAME#*.}
SERVER_NAME=${SERVER_NAME%/}
SHORT_SERVER_NAME=${SHORT_SERVER_NAME%/}

sed -i -e {s/__SERVER_ROOT__/${SERVER_ROOT//\//\\/}/}                "${SERVER_ROOT}apache_directives_template"
sed -i -e {s/__WWW_ROOT__/${WWW_ROOT//\//\\/}/}                      "${SERVER_ROOT}apache_directives_template"
sed -i -e {s/__SERVER_NAME__/${SERVER_NAME//\//\\/}/}                "${SERVER_ROOT}apache_directives_template"
sed -i -e {s/__SHORT_SERVER_NAME__/${SHORT_SERVER_NAME//\//\\/}/}    "${SERVER_ROOT}apache_directives_template"

if [[ $host_alias == "true" ]]
then
	sed -i -e {s/"#~"//}    "${SERVER_ROOT}apache_directives_template"
fi

apache_config="/etc/apache2/sites-available/ninjawars-$SERVER_NAME"

if [ -w $apache_config ]
then
	if echo "<VirtualHost ${VHOST_LISTEN}>" > $apache_config && cat "${SERVER_ROOT}apache_directives_template" >> $apache_config && echo "</VirtualHost>" >> $apache_config
	then
		rm "${SERVER_ROOT}apache_directives_template"
		echo "Apache config set."
	else
		echo "Warning: Access to $apache_config denied! You must make sure the following is included in an apache configuration:"
		cat "${SERVER_ROOT}apache_directives_template"
	fi
elif touch $cron_file
then
	if echo "<VirtualHost ${VHOST_LISTEN}>" > $apache_config && cat "${SERVER_ROOT}apache_directives_template" >> $apache_config && echo "</VirtualHost>" >> $apache_config
	then
		rm "${SERVER_ROOT}apache_directives_template"
		echo "Apache config set."
	else
		echo "Warning: Access to $apache_config denied! You must make sure the following is included in an apache configuration:"
		cat "${SERVER_ROOT}apache_directives_template"
	fi
else
	echo "Warning: Access to $apache_config denied! You must make sure the following is included in an apache configuration:"
	cat "${SERVER_ROOT}apache_directives_template"
fi

### /APACHE SECTION ###
#######################

cd - > /dev/null

echo "SUCCESS! Deployment complete."
